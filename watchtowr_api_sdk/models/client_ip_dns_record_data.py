# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat
from typing import Any, ClassVar, Dict, List
from watchtowr_api_sdk.models.client_ip_dns_record_owned_data import ClientIpDnsRecordOwnedData
from watchtowr_api_sdk.models.client_ip_dns_record_pointing_at_data import ClientIpDnsRecordPointingAtData
from typing import Optional, Set
from typing_extensions import Self

class ClientIpDnsRecordData(BaseModel):
    """
    ClientIpDnsRecordData
    """ # noqa: E501
    dns_records_total_count: StrictFloat
    dns_records_owned: ClientIpDnsRecordOwnedData
    dns_records_pointing_at: ClientIpDnsRecordPointingAtData
    __properties: ClassVar[List[str]] = ["dns_records_total_count", "dns_records_owned", "dns_records_pointing_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientIpDnsRecordData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dns_records_owned
        if self.dns_records_owned:
            _dict['dns_records_owned'] = self.dns_records_owned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dns_records_pointing_at
        if self.dns_records_pointing_at:
            _dict['dns_records_pointing_at'] = self.dns_records_pointing_at.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientIpDnsRecordData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ClientIpDnsRecordData) in the input: " + _key)

        _obj = cls.model_validate({
            "dns_records_total_count": obj.get("dns_records_total_count"),
            "dns_records_owned": ClientIpDnsRecordOwnedData.from_dict(obj["dns_records_owned"]) if obj.get("dns_records_owned") is not None else None,
            "dns_records_pointing_at": ClientIpDnsRecordPointingAtData.from_dict(obj["dns_records_pointing_at"]) if obj.get("dns_records_pointing_at") is not None else None
        })
        return _obj


