# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from watchtowr_api_sdk.models.client_dns_record_asset import ClientDnsRecordAsset
from typing import Optional, Set
from typing_extensions import Self

class ClientDnsRecord(BaseModel):
    """
    ClientDnsRecord
    """ # noqa: E501
    id: StrictFloat = Field(description="DNS Record ID")
    asset: Optional[ClientDnsRecordAsset] = Field(description="Asset information")
    record_name: StrictStr = Field(description="Identifies the resource this record resolves to.", alias="recordName")
    type: StrictStr = Field(description="The DNS record type defines the purpose or function of the record, such as domain name resolution, email routing, and more.")
    ttl: StrictFloat = Field(description="Time to live (TTL) controls how long each record is cached by resolvers.")
    value: StrictStr = Field(description="The value of a DNS record, depending on the record type. For example, the IP address of the origin server that hosts the web content served by an A or AAAA record.")
    created_at: datetime = Field(description="Creation date", alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "asset", "recordName", "type", "ttl", "value", "createdAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientDnsRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset
        if self.asset:
            _dict['asset'] = self.asset.to_dict()
        # set to None if asset (nullable) is None
        # and model_fields_set contains the field
        if self.asset is None and "asset" in self.model_fields_set:
            _dict['asset'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientDnsRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ClientDnsRecord) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "asset": ClientDnsRecordAsset.from_dict(obj["asset"]) if obj.get("asset") is not None else None,
            "recordName": obj.get("recordName"),
            "type": obj.get("type"),
            "ttl": obj.get("ttl"),
            "value": obj.get("value"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


