# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from watchtowr_api_sdk.models.client_pending_domain_whois_data import ClientPendingDomainWhoisData
from typing import Optional, Set
from typing_extensions import Self

class ClientPendingDomain(BaseModel):
    """
    ClientPendingDomain
    """ # noqa: E501
    id: StrictFloat = Field(description="Domain ID")
    status: StrictStr = Field(description="Domain status")
    name: StrictStr = Field(description="Domain name")
    source: StrictStr = Field(description="Source that discovered the domain")
    created_at: datetime = Field(description="Creation date")
    whois_data: Optional[ClientPendingDomainWhoisData] = Field(description="WHOIS data for the domain", alias="whoisData")
    __properties: ClassVar[List[str]] = ["id", "status", "name", "source", "created_at", "whoisData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientPendingDomain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of whois_data
        if self.whois_data:
            _dict['whoisData'] = self.whois_data.to_dict()
        # set to None if whois_data (nullable) is None
        # and model_fields_set contains the field
        if self.whois_data is None and "whois_data" in self.model_fields_set:
            _dict['whoisData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientPendingDomain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ClientPendingDomain) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "name": obj.get("name"),
            "source": obj.get("source"),
            "created_at": obj.get("created_at"),
            "whoisData": ClientPendingDomainWhoisData.from_dict(obj["whoisData"]) if obj.get("whoisData") is not None else None
        })
        return _obj


