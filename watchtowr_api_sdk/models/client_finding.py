# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from watchtowr_api_sdk.models.client_custom_property import ClientCustomProperty
from watchtowr_api_sdk.models.client_finding_assignee import ClientFindingAssignee
from watchtowr_api_sdk.models.client_finding_impact_tag import ClientFindingImpactTag
from watchtowr_api_sdk.models.finding_retest_response_dto import FindingRetestResponseDto
from watchtowr_api_sdk.models.retest import Retest
from typing import Optional, Set
from typing_extensions import Self

class ClientFinding(BaseModel):
    """
    ClientFinding
    """ # noqa: E501
    id: StrictFloat
    title: StrictStr
    description: StrictStr
    impact: StrictStr
    finding_impact: StrictStr
    tags: List[ClientFindingImpactTag]
    evidence: StrictStr
    recommendation: StrictStr
    severity: StrictStr
    cvssv3_score: StrictFloat
    cvssv3_metrics: StrictStr
    status: StrictStr
    created_at: Dict[str, Any]
    affected: Dict[str, Any]
    cve_id: Optional[StrictStr] = None
    epss_score: Optional[StrictFloat] = None
    retest: Optional[Retest] = None
    finding_retests: List[FindingRetestResponseDto]
    assigned_user: ClientFindingAssignee
    last_seen: Optional[Dict[str, Any]] = None
    last_status_updated_at: Dict[str, Any]
    age: StrictFloat
    criticality: StrictStr
    custom_properties: List[ClientCustomProperty] = Field(alias="customProperties")
    detection_rules: List[Dict[str, Any]]
    __properties: ClassVar[List[str]] = ["id", "title", "description", "impact", "finding_impact", "tags", "evidence", "recommendation", "severity", "cvssv3_score", "cvssv3_metrics", "status", "created_at", "affected", "cve_id", "epss_score", "retest", "finding_retests", "assigned_user", "last_seen", "last_status_updated_at", "age", "criticality", "customProperties", "detection_rules"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['critical', 'high', 'medium', 'low', 'info']):
            raise ValueError("must be one of enum values ('critical', 'high', 'medium', 'low', 'info')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['confirmed', 'unconfirmed', 'remediated', 'risk-accepted', 'closed', 'asset-no-longer-tracked']):
            raise ValueError("must be one of enum values ('confirmed', 'unconfirmed', 'remediated', 'risk-accepted', 'closed', 'asset-no-longer-tracked')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientFinding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of retest
        if self.retest:
            _dict['retest'] = self.retest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in finding_retests (list)
        _items = []
        if self.finding_retests:
            for _item_finding_retests in self.finding_retests:
                if _item_finding_retests:
                    _items.append(_item_finding_retests.to_dict())
            _dict['finding_retests'] = _items
        # override the default output from pydantic by calling `to_dict()` of assigned_user
        if self.assigned_user:
            _dict['assigned_user'] = self.assigned_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_properties (list)
        _items = []
        if self.custom_properties:
            for _item_custom_properties in self.custom_properties:
                if _item_custom_properties:
                    _items.append(_item_custom_properties.to_dict())
            _dict['customProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientFinding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ClientFinding) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "impact": obj.get("impact"),
            "finding_impact": obj.get("finding_impact"),
            "tags": [ClientFindingImpactTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "evidence": obj.get("evidence"),
            "recommendation": obj.get("recommendation"),
            "severity": obj.get("severity"),
            "cvssv3_score": obj.get("cvssv3_score"),
            "cvssv3_metrics": obj.get("cvssv3_metrics"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "affected": obj.get("affected"),
            "cve_id": obj.get("cve_id"),
            "epss_score": obj.get("epss_score"),
            "retest": Retest.from_dict(obj["retest"]) if obj.get("retest") is not None else None,
            "finding_retests": [FindingRetestResponseDto.from_dict(_item) for _item in obj["finding_retests"]] if obj.get("finding_retests") is not None else None,
            "assigned_user": ClientFindingAssignee.from_dict(obj["assigned_user"]) if obj.get("assigned_user") is not None else None,
            "last_seen": obj.get("last_seen"),
            "last_status_updated_at": obj.get("last_status_updated_at"),
            "age": obj.get("age"),
            "criticality": obj.get("criticality"),
            "customProperties": [ClientCustomProperty.from_dict(_item) for _item in obj["customProperties"]] if obj.get("customProperties") is not None else None,
            "detection_rules": obj.get("detection_rules")
        })
        return _obj


