# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from watchtowr_api_sdk.models.client_finding_retest_history_asset import ClientFindingRetestHistoryAsset
from watchtowr_api_sdk.models.client_finding_retest_history_finding import ClientFindingRetestHistoryFinding
from watchtowr_api_sdk.models.client_finding_retest_history_triggered_by import ClientFindingRetestHistoryTriggeredBy
from typing import Optional, Set
from typing_extensions import Self

class ClientFindingRetestHistory(BaseModel):
    """
    ClientFindingRetestHistory
    """ # noqa: E501
    id: StrictFloat = Field(description="Retest ID")
    finding: Optional[ClientFindingRetestHistoryFinding] = Field(description="Finding information")
    asset: Optional[ClientFindingRetestHistoryAsset] = Field(description="Affected asset information")
    triggered_by: Optional[ClientFindingRetestHistoryTriggeredBy] = Field(description="User who triggered the retest", alias="triggeredBy")
    current_retest_status: StrictStr = Field(description="Current retest status", alias="currentRetestStatus")
    started_at: datetime = Field(description="Date and time when the retest was started", alias="startedAt")
    completed_at: Optional[Dict[str, Any]] = Field(description="Date and time when the retest was completed", alias="completedAt")
    updated_at: datetime = Field(description="Date and time when the retest was last updated", alias="updatedAt")
    created_at: datetime = Field(description="Creation date", alias="createdAt")
    __properties: ClassVar[List[str]] = ["id", "finding", "asset", "triggeredBy", "currentRetestStatus", "startedAt", "completedAt", "updatedAt", "createdAt"]

    @field_validator('current_retest_status')
    def current_retest_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['started', 'in-progress', 'success', 'error']):
            raise ValueError("must be one of enum values ('started', 'in-progress', 'success', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientFindingRetestHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of finding
        if self.finding:
            _dict['finding'] = self.finding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asset
        if self.asset:
            _dict['asset'] = self.asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of triggered_by
        if self.triggered_by:
            _dict['triggeredBy'] = self.triggered_by.to_dict()
        # set to None if finding (nullable) is None
        # and model_fields_set contains the field
        if self.finding is None and "finding" in self.model_fields_set:
            _dict['finding'] = None

        # set to None if asset (nullable) is None
        # and model_fields_set contains the field
        if self.asset is None and "asset" in self.model_fields_set:
            _dict['asset'] = None

        # set to None if triggered_by (nullable) is None
        # and model_fields_set contains the field
        if self.triggered_by is None and "triggered_by" in self.model_fields_set:
            _dict['triggeredBy'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completedAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientFindingRetestHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ClientFindingRetestHistory) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "finding": ClientFindingRetestHistoryFinding.from_dict(obj["finding"]) if obj.get("finding") is not None else None,
            "asset": ClientFindingRetestHistoryAsset.from_dict(obj["asset"]) if obj.get("asset") is not None else None,
            "triggeredBy": ClientFindingRetestHistoryTriggeredBy.from_dict(obj["triggeredBy"]) if obj.get("triggeredBy") is not None else None,
            "currentRetestStatus": obj.get("currentRetestStatus"),
            "startedAt": obj.get("startedAt"),
            "completedAt": obj.get("completedAt"),
            "updatedAt": obj.get("updatedAt"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


