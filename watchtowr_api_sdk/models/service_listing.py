# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Automated Red Teaming API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from watchtowr_api_sdk.models.client_business_unit import ClientBusinessUnit
from watchtowr_api_sdk.models.service_type import ServiceType
from watchtowr_api_sdk.models.technology import Technology
from typing import Optional, Set
from typing_extensions import Self

class ServiceListing(BaseModel):
    """
    ServiceListing
    """ # noqa: E501
    id: StrictFloat = Field(description="ID")
    port_id: StrictFloat = Field(description="Port ID", alias="portId")
    ip: Optional[StrictStr] = Field(description="IP Address")
    hostname: Optional[StrictStr] = Field(description="Hostname")
    port: Optional[StrictFloat] = Field(default=None, description="Port number")
    type: Optional[StrictStr] = Field(default=None, description="Port Protocol")
    country: Optional[StrictStr] = Field(default=None, description="Country code")
    banner: Optional[StrictStr] = Field(default=None, description="Banner")
    service: Optional[StrictStr] = Field(default=None, description="Service")
    source: Optional[StrictStr] = Field(default=None, description="Asset source")
    last_seen: datetime = Field(description="Last seen date Range", alias="lastSeen")
    technologies: List[Technology] = Field(description="Technology list")
    service_types: List[ServiceType] = Field(description="Service types", alias="serviceTypes")
    business_units: List[ClientBusinessUnit] = Field(description="Business Units", alias="businessUnits")
    is_concerning: StrictBool = Field(description="Whether the discovered network service is concerning", alias="isConcerning")
    __properties: ClassVar[List[str]] = ["id", "portId", "ip", "hostname", "port", "type", "country", "banner", "service", "source", "lastSeen", "technologies", "serviceTypes", "businessUnits", "isConcerning"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceListing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in technologies (list)
        _items = []
        if self.technologies:
            for _item_technologies in self.technologies:
                if _item_technologies:
                    _items.append(_item_technologies.to_dict())
            _dict['technologies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_types (list)
        _items = []
        if self.service_types:
            for _item_service_types in self.service_types:
                if _item_service_types:
                    _items.append(_item_service_types.to_dict())
            _dict['serviceTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in business_units (list)
        _items = []
        if self.business_units:
            for _item_business_units in self.business_units:
                if _item_business_units:
                    _items.append(_item_business_units.to_dict())
            _dict['businessUnits'] = _items
        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        # set to None if hostname (nullable) is None
        # and model_fields_set contains the field
        if self.hostname is None and "hostname" in self.model_fields_set:
            _dict['hostname'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceListing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ServiceListing) in the input: " + _key)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "portId": obj.get("portId"),
            "ip": obj.get("ip"),
            "hostname": obj.get("hostname"),
            "port": obj.get("port"),
            "type": obj.get("type"),
            "country": obj.get("country"),
            "banner": obj.get("banner"),
            "service": obj.get("service"),
            "source": obj.get("source"),
            "lastSeen": obj.get("lastSeen"),
            "technologies": [Technology.from_dict(_item) for _item in obj["technologies"]] if obj.get("technologies") is not None else None,
            "serviceTypes": [ServiceType.from_dict(_item) for _item in obj["serviceTypes"]] if obj.get("serviceTypes") is not None else None,
            "businessUnits": [ClientBusinessUnit.from_dict(_item) for _item in obj["businessUnits"]] if obj.get("businessUnits") is not None else None,
            "isConcerning": obj.get("isConcerning")
        })
        return _obj


