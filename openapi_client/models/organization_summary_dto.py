# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from openapi_client.models.attack_surface_dto import AttackSurfaceDto
from openapi_client.models.findings_summary_dto import FindingsSummaryDto
from openapi_client.models.mttr_metrics_dto import MttrMetricsDto
from openapi_client.models.open_findings_dto import OpenFindingsDto
from typing import Optional, Set
from typing_extensions import Self

class OrganizationSummaryDto(BaseModel):
    """
    OrganizationSummaryDto
    """ # noqa: E501
    attack_surface: AttackSurfaceDto = Field(description="Attack surface metrics", alias="attackSurface")
    open_findings: OpenFindingsDto = Field(description="Breakdown of findings by severity level", alias="openFindings")
    mttr_metrics: MttrMetricsDto = Field(description="Mean Time To Remediation metrics", alias="mttrMetrics")
    findings_summary: FindingsSummaryDto = Field(description="Historical and categorized finding metrics", alias="findingsSummary")
    __properties: ClassVar[List[str]] = ["attackSurface", "openFindings", "mttrMetrics", "findingsSummary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationSummaryDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attack_surface
        if self.attack_surface:
            _dict['attackSurface'] = self.attack_surface.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_findings
        if self.open_findings:
            _dict['openFindings'] = self.open_findings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mttr_metrics
        if self.mttr_metrics:
            _dict['mttrMetrics'] = self.mttr_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of findings_summary
        if self.findings_summary:
            _dict['findingsSummary'] = self.findings_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationSummaryDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attackSurface": AttackSurfaceDto.from_dict(obj["attackSurface"]) if obj.get("attackSurface") is not None else None,
            "openFindings": OpenFindingsDto.from_dict(obj["openFindings"]) if obj.get("openFindings") is not None else None,
            "mttrMetrics": MttrMetricsDto.from_dict(obj["mttrMetrics"]) if obj.get("mttrMetrics") is not None else None,
            "findingsSummary": FindingsSummaryDto.from_dict(obj["findingsSummary"]) if obj.get("findingsSummary") is not None else None
        })
        return _obj


