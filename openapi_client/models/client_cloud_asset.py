# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.client_custom_property import ClientCustomProperty
from typing import Optional, Set
from typing_extensions import Self

class ClientCloudAsset(BaseModel):
    """
    ClientCloudAsset
    """ # noqa: E501
    type: StrictStr
    name: StrictStr
    source: StrictStr
    provider: StrictStr
    super_type: StrictStr
    sub_type: StrictStr
    hostname: StrictStr
    cloud_resource_id: StrictStr
    created_at: DatetimeDate
    updated_at: DatetimeDate
    deleted_at: DatetimeDate
    metadata: Dict[str, Any]
    custom_properties: List[ClientCustomProperty] = Field(alias="customProperties")
    criticality: StrictStr
    __properties: ClassVar[List[str]] = ["type", "name", "source", "provider", "super_type", "sub_type", "hostname", "cloud_resource_id", "created_at", "updated_at", "deleted_at", "metadata", "customProperties", "criticality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientCloudAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deleted_at
        if self.deleted_at:
            _dict['deleted_at'] = self.deleted_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_properties (list)
        _items = []
        if self.custom_properties:
            for _item_custom_properties in self.custom_properties:
                if _item_custom_properties:
                    _items.append(_item_custom_properties.to_dict())
            _dict['customProperties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientCloudAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "source": obj.get("source"),
            "provider": obj.get("provider"),
            "super_type": obj.get("super_type"),
            "sub_type": obj.get("sub_type"),
            "hostname": obj.get("hostname"),
            "cloud_resource_id": obj.get("cloud_resource_id"),
            "created_at": DatetimeDate.from_dict(obj["created_at"]) if obj.get("created_at") is not None else None,
            "updated_at": DatetimeDate.from_dict(obj["updated_at"]) if obj.get("updated_at") is not None else None,
            "deleted_at": DatetimeDate.from_dict(obj["deleted_at"]) if obj.get("deleted_at") is not None else None,
            "metadata": obj.get("metadata"),
            "customProperties": [ClientCustomProperty.from_dict(_item) for _item in obj["customProperties"]] if obj.get("customProperties") is not None else None,
            "criticality": obj.get("criticality")
        })
        return _obj


