# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.finding_list_response import FindingListResponse

class TestFindingListResponse(unittest.TestCase):
    """FindingListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FindingListResponse:
        """Test FindingListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FindingListResponse`
        """
        model = FindingListResponse()
        if include_optional:
            return FindingListResponse(
                data = [
                    openapi_client.models.client_finding.ClientFinding(
                        id = 1, 
                        title = 'Valid Credentials Discovered In Business System', 
                        description = 'Through watchTowr's Credential Stuffing capabilities, a valid set of credentials have been identified to work to authenticate to a legitimately exposed business system. 

These credentials have been confirmed as valid against the identified system, and are publicly available.', 
                        impact = 'Depending on the system, if leveraged by an attacker it may be possible to:

* Gain access to internal systems
* Gain access to sensitive and confidential data
* Gain VPN access for further internal exploitation and deployment of payloads such as ransomware', 
                        finding_impact = 'Prioritised Findings', 
                        tags = [
                            openapi_client.models.client_finding_impact_tag.ClientFindingImpactTag(
                                id = 1, 
                                name = 'CISA-KEV', )
                            ], 
                        evidence = 'URL: https://example.com/adfs/ls

Valid credentials discovered:
Username: user
Password: user123!

MFA status: Single-factor authentication', 
                        recommendation = 'As a priority, it is recommended that the identified credentials be revoked and rotated. As a follow-up an analysis should also be performed to ensure that the identified credentials have not previously been utilised by an attacker.

As a long-term measure to ensure that the security impact of breach credentials are minimised, it is recommended that:
* Two-factor authentication (2FA) to be enabled for all business systems that support it, which provides an additional layer of security
* Use a Single Sign-On (SSO) service for business systems, where possible
', 
                        severity = 'high', 
                        cvssv3_score = 8.1, 
                        cvssv3_metrics = 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N/E:F/RL:W/RC:C', 
                        status = 'confirmed', 
                        created_at = 2022-02-13T02:10:00.000000Z, 
                        affected = openapi_client.models.affected.affected(), 
                        cve_id = 'CVE-2023-38180', 
                        epss_score = 0.97521, 
                        retest = openapi_client.models.retest.Retest(
                            retest_remaining = 1, 
                            current_retest = openapi_client.models.finding_retest_response_dto.FindingRetestResponseDto(
                                requested_by = 'Requested by user', 
                                requested_at = '2024-01-29T08:05:09Z', 
                                retest_status = 'success', 
                                status_occurred_at = '2024-01-29T08:05:09Z', 
                                completed_at = '2024-01-29T08:05:09Z', 
                                evidence = 'Evidence for retest', ), ), 
                        finding_retests = [
                            openapi_client.models.finding_retest_response_dto.FindingRetestResponseDto(
                                requested_by = 'Requested by user', 
                                requested_at = '2024-01-29T08:05:09Z', 
                                retest_status = 'success', 
                                status_occurred_at = '2024-01-29T08:05:09Z', 
                                completed_at = '2024-01-29T08:05:09Z', 
                                evidence = 'Evidence for retest', )
                            ], 
                        assigned_user = openapi_client.models.client_finding_assignee.ClientFindingAssignee(
                            name = 'John Smith', ), 
                        last_seen = 2022-02-13T02:10:00.000000Z, 
                        last_status_updated_at = 2022-02-13T02:10:00.000000Z, 
                        age = 30, 
                        criticality = 'Medium', 
                        custom_properties = [{"id":10,"key":"Severity","value":"normal","isPreset":false,"modelType":"finding","modelId":209,"createdAt":"2024-09-24T02:37:27.000Z","updatedAt":"2024-09-24T02:38:35.000Z"},{"id":11,"key":"Vulnerability","value":"low risk","isPreset":false,"modelType":"finding","modelId":209,"createdAt":"2024-09-24T02:37:27.000Z","updatedAt":"2024-09-24T02:38:35.000Z"}], 
                        detection_rules = [{"type":"sigma","id":155,"tags":["attack.initial-access","attack.t1190","cve.2021-44228","detection.emerging-threats"],"title":"Potential CVE-2021-44228 Exploitation Attempt - VMware Horizon","url":"https://github.com/SigmaHQ/sigma/blob/master/rules-emerging-threats/2021/Exploits/CVE-2021-44228/proc_creation_win_exploit_cve_2021_44228_vmware_horizon_log4j.yml"}], )
                    ],
                meta = openapi_client.models.meta.Meta(
                    pagination = {"total":20,"count":10,"per_page":10,"current_page":1,"total_pages":2,"links":{"previous":"url","next":"url"}}, )
            )
        else:
            return FindingListResponse(
                data = [
                    openapi_client.models.client_finding.ClientFinding(
                        id = 1, 
                        title = 'Valid Credentials Discovered In Business System', 
                        description = 'Through watchTowr's Credential Stuffing capabilities, a valid set of credentials have been identified to work to authenticate to a legitimately exposed business system. 

These credentials have been confirmed as valid against the identified system, and are publicly available.', 
                        impact = 'Depending on the system, if leveraged by an attacker it may be possible to:

* Gain access to internal systems
* Gain access to sensitive and confidential data
* Gain VPN access for further internal exploitation and deployment of payloads such as ransomware', 
                        finding_impact = 'Prioritised Findings', 
                        tags = [
                            openapi_client.models.client_finding_impact_tag.ClientFindingImpactTag(
                                id = 1, 
                                name = 'CISA-KEV', )
                            ], 
                        evidence = 'URL: https://example.com/adfs/ls

Valid credentials discovered:
Username: user
Password: user123!

MFA status: Single-factor authentication', 
                        recommendation = 'As a priority, it is recommended that the identified credentials be revoked and rotated. As a follow-up an analysis should also be performed to ensure that the identified credentials have not previously been utilised by an attacker.

As a long-term measure to ensure that the security impact of breach credentials are minimised, it is recommended that:
* Two-factor authentication (2FA) to be enabled for all business systems that support it, which provides an additional layer of security
* Use a Single Sign-On (SSO) service for business systems, where possible
', 
                        severity = 'high', 
                        cvssv3_score = 8.1, 
                        cvssv3_metrics = 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N/E:F/RL:W/RC:C', 
                        status = 'confirmed', 
                        created_at = 2022-02-13T02:10:00.000000Z, 
                        affected = openapi_client.models.affected.affected(), 
                        cve_id = 'CVE-2023-38180', 
                        epss_score = 0.97521, 
                        retest = openapi_client.models.retest.Retest(
                            retest_remaining = 1, 
                            current_retest = openapi_client.models.finding_retest_response_dto.FindingRetestResponseDto(
                                requested_by = 'Requested by user', 
                                requested_at = '2024-01-29T08:05:09Z', 
                                retest_status = 'success', 
                                status_occurred_at = '2024-01-29T08:05:09Z', 
                                completed_at = '2024-01-29T08:05:09Z', 
                                evidence = 'Evidence for retest', ), ), 
                        finding_retests = [
                            openapi_client.models.finding_retest_response_dto.FindingRetestResponseDto(
                                requested_by = 'Requested by user', 
                                requested_at = '2024-01-29T08:05:09Z', 
                                retest_status = 'success', 
                                status_occurred_at = '2024-01-29T08:05:09Z', 
                                completed_at = '2024-01-29T08:05:09Z', 
                                evidence = 'Evidence for retest', )
                            ], 
                        assigned_user = openapi_client.models.client_finding_assignee.ClientFindingAssignee(
                            name = 'John Smith', ), 
                        last_seen = 2022-02-13T02:10:00.000000Z, 
                        last_status_updated_at = 2022-02-13T02:10:00.000000Z, 
                        age = 30, 
                        criticality = 'Medium', 
                        custom_properties = [{"id":10,"key":"Severity","value":"normal","isPreset":false,"modelType":"finding","modelId":209,"createdAt":"2024-09-24T02:37:27.000Z","updatedAt":"2024-09-24T02:38:35.000Z"},{"id":11,"key":"Vulnerability","value":"low risk","isPreset":false,"modelType":"finding","modelId":209,"createdAt":"2024-09-24T02:37:27.000Z","updatedAt":"2024-09-24T02:38:35.000Z"}], 
                        detection_rules = [{"type":"sigma","id":155,"tags":["attack.initial-access","attack.t1190","cve.2021-44228","detection.emerging-threats"],"title":"Potential CVE-2021-44228 Exploitation Attempt - VMware Horizon","url":"https://github.com/SigmaHQ/sigma/blob/master/rules-emerging-threats/2021/Exploits/CVE-2021-44228/proc_creation_win_exploit_cve_2021_44228_vmware_horizon_log4j.yml"}], )
                    ],
                meta = openapi_client.models.meta.Meta(
                    pagination = {"total":20,"count":10,"per_page":10,"current_page":1,"total_pages":2,"links":{"previous":"url","next":"url"}}, ),
        )
        """

    def testFindingListResponse(self):
        """Test FindingListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
