# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service_listing import ServiceListing

class TestServiceListing(unittest.TestCase):
    """ServiceListing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ServiceListing:
        """Test ServiceListing
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ServiceListing`
        """
        model = ServiceListing()
        if include_optional:
            return ServiceListing(
                id = 1,
                port_id = 1,
                ip = '123.123.123.123',
                domain = 'example.com',
                subdomain = 'sub.example.com',
                asset_type = 'IP',
                asset_id = 1,
                asset_name = '1',
                port = 80,
                type = 'TCP',
                country = 'US',
                banner = 'Apache/2.4.7',
                service = 'HTTPS',
                source = 'DNS Refresh',
                last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                technologies = [
                    openapi_client.models.technology.Technology(
                        id = 1, 
                        name = 'APACHE', 
                        version = '0.1', 
                        display_name = 'APACHE', )
                    ],
                service_types = [
                    openapi_client.models.service_type.ServiceType(
                        id = 1, 
                        name = 'APACHE', )
                    ],
                business_units = [
                    openapi_client.models.client_business_unit.ClientBusinessUnit(
                        id = 1, 
                        name = 'Singapore Business Unit', )
                    ]
            )
        else:
            return ServiceListing(
                id = 1,
                port_id = 1,
                ip = '123.123.123.123',
                domain = 'example.com',
                subdomain = 'sub.example.com',
                asset_type = 'IP',
                asset_id = 1,
                asset_name = '1',
                last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                technologies = [
                    openapi_client.models.technology.Technology(
                        id = 1, 
                        name = 'APACHE', 
                        version = '0.1', 
                        display_name = 'APACHE', )
                    ],
                service_types = [
                    openapi_client.models.service_type.ServiceType(
                        id = 1, 
                        name = 'APACHE', )
                    ],
                business_units = [
                    openapi_client.models.client_business_unit.ClientBusinessUnit(
                        id = 1, 
                        name = 'Singapore Business Unit', )
                    ],
        )
        """

    def testServiceListing(self):
        """Test ServiceListing"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
