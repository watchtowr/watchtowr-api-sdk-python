# coding: utf-8

"""
    Complete watchTowr Platform API Documentation

    The watchTowr Client API combining all watchTowr Platform APIs into a single comprehensive reference, including:       * Continuous Assurance API       * Adversary Sight API       * Intelligence API       * Platform API 

    The version of the OpenAPI document: 1.0
    Contact: support@watchTowr.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.paginated_suspicious_domain import PaginatedSuspiciousDomain

class TestPaginatedSuspiciousDomain(unittest.TestCase):
    """PaginatedSuspiciousDomain unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedSuspiciousDomain:
        """Test PaginatedSuspiciousDomain
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedSuspiciousDomain`
        """
        model = PaginatedSuspiciousDomain()
        if include_optional:
            return PaginatedSuspiciousDomain(
                data = [
                    openapi_client.models.suspicious_domain.SuspiciousDomain(
                        id = 1, 
                        name = 'example.com', 
                        discovery_reason = 'Example reason', 
                        status = 'legitimate', 
                        whois_data = [
                            openapi_client.models.whois_data.WhoisData(
                                id = 1, 
                                data = openapi_client.models.whois_data_object.WhoisDataObject(
                                    org = 'ACME Corp', 
                                    city = 'Singapore', 
                                    name = 'John Doe', 
                                    state = 'Singapore', 
                                    dnssec = 'unsigned', 
                                    emails = null, 
                                    status = null, 
                                    address = 'Singapore 123456', 
                                    country = 'Singapore', 
                                    zipcode = '123456', 
                                    registrar = 'GoDaddy.com, LLC', 
                                    domain_name = 'example.com', 
                                    name_servers = null, 
                                    referral_url = '', 
                                    whois_server = 'whois.godaddy.com', 
                                    creation_date = '1989-07-15T04:00:00', 
                                    expiration_date = '2030-07-15T04:00:00', ), 
                                raw = 'Domain Name: example.com
Registry Domain ID: 5066842_DOMAIN_COM-VRSN
Registrar WHOIS Server: whois.godaddy.com
Registrar URL: http://www.example.com
Updated Date: 2023-04-13T19:03:58Z
Creation Date: 1997-06-18T04:00:00Z
Registrar Registration Expiration Date: 2027-06-17T04:00:00Z
            ...', )
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                meta = openapi_client.models.meta.Meta(
                    pagination = {"total":20,"count":10,"per_page":10,"current_page":1,"total_pages":2,"links":{"previous":"url","next":"url"}}, )
            )
        else:
            return PaginatedSuspiciousDomain(
                data = [
                    openapi_client.models.suspicious_domain.SuspiciousDomain(
                        id = 1, 
                        name = 'example.com', 
                        discovery_reason = 'Example reason', 
                        status = 'legitimate', 
                        whois_data = [
                            openapi_client.models.whois_data.WhoisData(
                                id = 1, 
                                data = openapi_client.models.whois_data_object.WhoisDataObject(
                                    org = 'ACME Corp', 
                                    city = 'Singapore', 
                                    name = 'John Doe', 
                                    state = 'Singapore', 
                                    dnssec = 'unsigned', 
                                    emails = null, 
                                    status = null, 
                                    address = 'Singapore 123456', 
                                    country = 'Singapore', 
                                    zipcode = '123456', 
                                    registrar = 'GoDaddy.com, LLC', 
                                    domain_name = 'example.com', 
                                    name_servers = null, 
                                    referral_url = '', 
                                    whois_server = 'whois.godaddy.com', 
                                    creation_date = '1989-07-15T04:00:00', 
                                    expiration_date = '2030-07-15T04:00:00', ), 
                                raw = 'Domain Name: example.com
Registry Domain ID: 5066842_DOMAIN_COM-VRSN
Registrar WHOIS Server: whois.godaddy.com
Registrar URL: http://www.example.com
Updated Date: 2023-04-13T19:03:58Z
Creation Date: 1997-06-18T04:00:00Z
Registrar Registration Expiration Date: 2027-06-17T04:00:00Z
            ...', )
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                meta = openapi_client.models.meta.Meta(
                    pagination = {"total":20,"count":10,"per_page":10,"current_page":1,"total_pages":2,"links":{"previous":"url","next":"url"}}, ),
        )
        """

    def testPaginatedSuspiciousDomain(self):
        """Test PaginatedSuspiciousDomain"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
